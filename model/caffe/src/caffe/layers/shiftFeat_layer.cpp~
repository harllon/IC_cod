#include <vector>
#include <iostream>
#include "caffe/layers/shiftFeat_layer.hpp"

namespace caffe {

// FIXME: needed?
template<typename Dtype>
void ShiftFeatLayer< Dtype >::LayerSetUp(const vector< Blob< Dtype >* >& bottom,
                                      const vector< Blob< Dtype >* >& top) {
	// Nothing to setup for
}

template<typename Dtype>
void ShiftFeatLayer< Dtype >::Reshape(const vector< Blob< Dtype >* >& bottom,
                                   const vector< Blob< Dtype >* >& top) {
	const ShiftParameter& shift_param = this->layer_param_.shift_param();  
  	res = shift_param.res();
	step = shift_param.step();
	
	//CHECK_EQ(bottom[0]->num(), 
	//	bottom[1]->num()) << "Shift requires num to be the same for both bottom blobs";
	CHECK_EQ(bottom[0]->channels() % 3, 0) << "Remap requires input blob (bottom[0]) to have only 3 * views channels";
	top[0]->Reshape(bottom[0]->num(), res,
		bottom[0]->height(), bottom[0]->width());
	top[1]->Reshape(bottom[0]->num(), res,
		bottom[0]->height(), bottom[0]->width());
}

template<typename Dtype>
inline Dtype getvalue(Dtype* V, int x, int y, int c, int n, int C, int W, int H) {
	/*x = x % W;
	x = x < 0? x + W : x;
	y = y % H;
	y = y < 0? y + H : y; 
	c = c % C;
	c = c < 0? c + C : c; */
	if ( x < 0 || x > W - 1 || y < 0 || y > H - 1 || c < 0 || c > C - 1) 
		return 0;	
	return V[((n*C+c)*H+y)*W+x];
}

template<typename Dtype>
inline void addvalue(Dtype* V, int x, int y, int c, int n, int C, int W, int H, Dtype v) {
	if ( x < 0 || x > W - 1 || y < 0 || y > H - 1 || c < 0 || c > C - 1) 
		return;
	V[((n*C+c)*H+y)*W+x] += v;
}

template <typename Dtype>
void ShiftFeatLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,
    								const vector<Blob<Dtype>*>& top) {
	Dtype* mean = top[0]->mutable_cpu_data();
    Dtype* var = top[1]->mutable_cpu_data();
	caffe_set(top[0]->count(), Dtype(0), top[0]->mutable_cpu_data());
    caffe_set(top[1]->count(), Dtype(0), top[1]->mutable_cpu_data());
	int N  = bottom[0]->num();
	int C  = bottom[0]->channels();	
	int W = bottom[0]->width();
	int H = bottom[0]->height();
    int uv_dia = sqrt(bottom.size());
	Dtype x, y, wx, wy, w00, w01, w10, w11, v00, v01, v10, v11;
	int x0, y0, x1, y1;
	Dtype rgb2gray[3] = { 0.2989, 0.5870, 0.1140 };
    for ( int uv = 0; uv < bottom.size(); uv++) {
        int v = uv / uv_dia - (uv_dia-1)/2;
        int u = uv % uv_dia - (uv_dia-1)/2;
        const Dtype* Vb = bottom[uv]->cpu_data();
        for ( int shift_idx = 0; shift_idx < res; shift_idx++ ) {
            Dtype shift = shift_idx * step - Dtype(res-1)/2*step;
            for ( int h = 0; h < H; h++ ) {
                for ( int w = 0; w < W; w++ ) {
                    x = w + shift * u;
                    y = h + shift * v;
                    x0 = floor(x); y0 = floor(y);
                    x1 = x0 + 1;   y1 = y0 + 1;
                    wx = x - x0;   wy = y - y0;
                    w00 = (1 - wx) * (1 - wy);
                    w01 = (1 - wx) * wy;
                    w10 = wx * (1 - wy);
                    w11 = wx * wy;
                    for ( int n = 0; n < N; n++ ) {
                        Dtype sum = 0;
                        for ( int c = 0; c < C; c++ ) {
                            v00 = getvalue(Vb, x0, y0, c, n, C, W, H);
                            v01 = getvalue(Vb, x0, y1, c, n, C, W, H);
                            v10 = getvalue(Vb, x1, y0, c, n, C, W, H);
                            v11 = getvalue(Vb, x1, y1, c, n, C, W, H);
                            sum += rgb2gray[c] * (w00 * v00 + w01 * v01 + w10 * v10 + w11 * v11);
                        }
                        int idx = ((n*res+shift_idx)*H+h)*W+w;
                        mean[idx] += sum;
                        var[idx] += sum*sum;
                    }
				}
			}
		}
	}
    
    for ( int n = 0; n < N; n++ ) {
        for ( int shift_idx = 0; shift_idx < res; shift_idx++ ) {
            for ( int h = 0; h < H; h++ ) {
                for ( int w = 0; w < W; w++ ) {
                    int idx = ((n*res+shift_idx)*H+h)*W+w;
                    mean[idx] /= uv_dia*uv_dia;
                    var[idx] /= uv_dia*uv_dia;
                    var[idx] -= mean[idx]*mean[idx];
                }
            }
        }
    }
}

template <typename Dtype>
void ShiftFeatLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,
    								const vector<bool>& propagate_down,
    								const vector<Blob<Dtype>*>& bottom) {	
}

#ifdef CPU_ONLY
STUB_GPU(ShiftFeatLayer);
#endif
INSTANTIATE_CLASS(ShiftFeatLayer);
REGISTER_LAYER_CLASS(ShiftFeat);

}  // namespace caffe
